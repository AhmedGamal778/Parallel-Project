private void mobilesButtonMouseClicked(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        cardParentPanel.removeAll();
        cardParentPanel.add(mobilesPanel);
        cardParentPanel.repaint();
        cardParentPanel.revalidate();
    }                                          

    private void mobilesButtonMouseEntered(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        mobilesButton.setBackground(new Color(0, 0, 0));
    }                                          

    private void mobilesButtonMouseExited(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        mobilesButton.setBackground(new Color(0, 0, 0));
    }                                         

    private void mobilesButtonMousePressed(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        mobilesButton.setBackground(new Color(0, 0, 0));
    }                                          

    private void mobilesButtonMouseReleased(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        mobilesButton.setBackground(new Color(0, 0, 0));
    }                                           

    
    private void mobilesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        ProductInformation.categoryChooser = "mobiles";
        ArrayList<ProductList> list = MobileDB.TableGenerator();
        String[] columnName = {};
        Object rowData[] = new Object[6];
        
        DefaultTableModel model =  (DefaultTableModel) mobileTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        mobileTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        mobileTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        mobileTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        mobileTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        mobileTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );

       
        model.setRowCount(0); //To clear mobileTable
        
        for(int i=0; i<list.size(); i++){
            rowData[0] = list.get(i).getBrand();
            rowData[1] = list.get(i).getModel();
            rowData[2] = list.get(i).getPrice();
            rowData[3] = list.get(i).getQty();
            rowData[4] = list.get(i).getDescription();
            String temp = list.get(i).getMimage();
            ImageIcon ii = new ImageIcon(getClass().getResource("/products/mobiles/"+temp));
            Image resizedImage = ii.getImage();
            ii = new ImageIcon(resizedImage.getScaledInstance(160, 160, Image.SCALE_SMOOTH));
            
            rowData[5] = ii;
            model.addRow(rowData);
            mobileTable.setRowHeight(150);
            mobileTable.getColumnModel().getColumn(5).setPreferredWidth(150);
        }
        
    }                                             

    private void kidsButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        cardParentPanel.removeAll();
        cardParentPanel.add(kidsPanel);
        cardParentPanel.repaint();
        cardParentPanel.revalidate();
    }                                       

    private void kidsButtonMouseEntered(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        kidsButton.setBackground(new Color(0, 0, 0));
    }                                       

    private void kidsButtonMouseExited(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        kidsButton.setBackground(new Color(0, 0, 0));
    }                                      

    private void kidsButtonMousePressed(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
        kidsButton.setBackground(new Color(0, 0, 0));
    }                                       

    private void kidsButtonMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        kidsButton.setBackground(new Color(0, 0, 0));
    }                                        

    private void kidsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        ProductInformation.categoryChooser = "kids";
        ArrayList<ProductList> list = KidsDB.TableGenerator();
        Object rowData[] = new Object[6];
        
        DefaultTableModel model =  (DefaultTableModel) kidsTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        kidsTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        kidsTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        kidsTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        kidsTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        kidsTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );

       
        model.setRowCount(0); //To clear mobileTable
        
        for(int i=0; i<list.size(); i++){
            rowData[0] = list.get(i).getBrand();
            rowData[1] = list.get(i).getModel();
            rowData[2] = list.get(i).getPrice();
            rowData[3] = list.get(i).getQty();
            rowData[4] = list.get(i).getDescription();
            String temp = list.get(i).getMimage();
            ImageIcon ii = new ImageIcon(getClass().getResource("/products/kids/"+temp));
            Image resizedImage = ii.getImage();
            ii = new ImageIcon(resizedImage.getScaledInstance(160, 160, Image.SCALE_SMOOTH));
            
            rowData[5] = ii;
            model.addRow(rowData);
            kidsTable.setRowHeight(150);
            kidsTable.getColumnModel().getColumn(5).setPreferredWidth(150);
        }
        
    }                                          

    private void signInUsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   
    static String logger;
    
    private void LogInButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here: 
        
        JFrame adminPanel = new AdminPanel();
        if(signInUsernameField.getText().equals("admin") && signInPasswordField.getText().equals("admin")){
            signInStatus = true;
            adminPanel.setVisible(true);
            logger = signInUsernameField.getText();
            signInUsernameField.setText("");
            signInPasswordField.setText("");
            warningLabel.setText("");
            cardParentPanel.removeAll();
            cardParentPanel.add(homePanel);
            cardParentPanel.repaint();
            cardParentPanel.revalidate();
            wrongPass = 0;
        }
        else{
            
            boolean flag = DbConnector.signer(signInUsernameField.getText(), signInPasswordField.getText());
            
            if(flag){
                signInStatus = true;
                cardParentPanel.removeAll();
                cardParentPanel.add(homePanel);
                cardParentPanel.repaint();
                cardParentPanel.revalidate();
                logger = signInUsernameField.getText();
                warningLabel.setText("");
                signInUsernameField.setText("");
                signInPasswordField.setText("");
                wrongPass = 0;
            }
                
            else{
                warningLabel.setText("Wrong username/password!");
                wrongPass++;
                
                if(wrongPass>=3){
                    ForgotPasswordFrame fpf = new ForgotPasswordFrame();
                }
                
                signInUsernameField.setText("");
                signInPasswordField.setText("");
            }
                
        }
        
        
    }                                           

    private void signUpButtonMouseEntered(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        signUpButton.setForeground(new Color(48, 79, 254));
    }                                         

    private void signUpButtonMouseExited(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        signUpButton.setForeground(new Color(0, 150, 136));
    }                                        

    private void signUpButtonMousePressed(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        signUpButton.setForeground(new Color(0, 77, 64));
    }                                         

    private void signUpButtonMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        signUpButton.setForeground(new Color(0, 150, 136));
    }                                          

    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        cardParentPanel.removeAll();
        cardParentPanel.add(signUpPanel);
        cardParentPanel.repaint();
        cardParentPanel.revalidate();
    }                                            

    private void showPassword1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        if(showPassword1.isSelected()){
           signInPasswordField.setEchoChar((char)0);
        }
        else
            signInPasswordField.setEchoChar('*');
    }                                             

    private void jPanel6FocusGained(java.awt.event.FocusEvent evt) {                                    
        // TODO add your handling code here:
       
    }                                   

    private void jPanel6ComponentShown(java.awt.event.ComponentEvent evt) {                                       
        // TODO add your handling code here:
        
    }                                      

    private void signUpUsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void LogUpButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        if(signUpUsernameField.getText().equals("")||signUpNameField.getText().equals("")||signUpEmailField.getText().equals("")
           ||signUpPasswordField.getText().equals(""))
            emptyField.setText("*One or more required fields are empty!");
        else{
            int test = DbConnector.insertToUser(signUpUsernameField.getText(), signUpNameField.getText(),
                signUpEmailField.getText(), signUpPasswordField.getText(),
                signUpCardNumberField.getText());

            if(test == 19){
                usernameExists.setText("Username exists!");
                emptyField.setText("");
                signUpUsernameField.setText("");
            }

            else{
                signUpUsernameField.setText("");
                signUpNameField.setText("");
                signUpEmailField.setText("");
                signUpPasswordField.setText("");
                signUpCardNumberField.setText("");
                emptyField.setText("");
            }
            
            // Client Code
            try{
                    Socket socket = null;
                    String host = "192.168.118.172";

                    socket = new Socket(host, 4444);

                    File file = new File("C:\\Users\\lenovo\\Desktop\\project\\Shopping Cart in Java\\Project\\DBs\\bbs.db");
                    long length = file.length();
                    byte[] bytes = new byte[16 * 1024];
                    InputStream in = new FileInputStream(file);
                    OutputStream out = socket.getOutputStream();

                    int count;
                    while ((count = in.read(bytes)) > 0) {
                        out.write(bytes, 0, count);
                    }

                    out.close();
                    in.close();
                    socket.close();
            }catch(IOException ex){
                System.out.println("Error");
            }
            
            
        }

    }                                           

    private void showPasswordActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        if(showPassword.isSelected()){
            signUpPasswordField.setEchoChar((char)0);
        }
        else
        signUpPasswordField.setEchoChar('*');
    }                                            

    private void signInButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        cardParentPanel.removeAll();
        cardParentPanel.add(signInPanel);
        cardParentPanel.repaint();
        cardParentPanel.revalidate();

    }                                            

    private void signInButtonMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        signInButton.setForeground(new Color(0, 150, 136));
    }                                          

    private void signInButtonMousePressed(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        signInButton.setForeground(new Color(0, 77, 64));
    }                                         

    private void signInButtonMouseExited(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        signInButton.setForeground(new Color(0, 150, 136));
    }                                        

    private void signInButtonMouseEntered(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        signInButton.setForeground(new Color(48, 79, 254));
    }                                         

    private void signUpCardNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void signUpEmailFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void signUpNameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    ProductInformation pi = new ProductInformation();
    
    private void mobileTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        pi.setVisible(true);
        pi.pack();
        
        int selectedRow = mobileTable.getSelectedRow();
        TableModel tm = mobileTable.getModel();
        
        String brand = tm.getValueAt(selectedRow, 0).toString();
        String model = tm.getValueAt(selectedRow, 1).toString();
        String price = tm.getValueAt(selectedRow, 2).toString();
        String stock = tm.getValueAt(selectedRow, 3).toString();
        String feature = tm.getValueAt(selectedRow, 4).toString();
        ImageIcon img = (ImageIcon) tm.getValueAt(selectedRow, 5);
        
        pi.productInfoBrandName.setText(brand);
        pi.productInfoModel.setText(model);
        pi.productInfoPrice.setText(price);
        pi.productInfoStock.setText(stock);
        pi.productInfoFeature.setText(feature);
        pi.productPhoto.setIcon(img);
    }                                        

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(!signInStatus){
        cardParentPanel.removeAll();
        cardParentPanel.add(signInPanel);
        cardParentPanel.repaint();
        cardParentPanel.revalidate();
        
        warningLabel.setText("Please Sign In first.");

        }
        else{
            Date date = new Date();
            JFrame da = new DeliveryAddress(logger, Integer.parseInt(billLabel.getText()), date.toString());
            da.setVisible(true);
        }
    }                                         

    private void warningLabelActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void electronicsTableMouseClicked(java.awt.event.MouseEvent evt) {                                              
        // TODO add your handling code here:
        pi.setVisible(true);
        pi.pack();
        
        int selectedRow = electronicsTable.getSelectedRow();
        TableModel tm = electronicsTable.getModel();
        
        String brand = tm.getValueAt(selectedRow, 0).toString();
        String model = tm.getValueAt(selectedRow, 1).toString();
        String price = tm.getValueAt(selectedRow, 2).toString();
        String stock = tm.getValueAt(selectedRow, 3).toString();
        String feature = tm.getValueAt(selectedRow, 4).toString();
        ImageIcon img = (ImageIcon) tm.getValueAt(selectedRow, 5);
        
        pi.productInfoBrandName.setText(brand);
        pi.productInfoModel.setText(model);
        pi.productInfoPrice.setText(price);
        pi.productInfoStock.setText(stock);
        pi.productInfoFeature.setText(feature);
        pi.productPhoto.setIcon(img);
    }                                             

    private void kidsTableMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        pi.setVisible(true);
        pi.pack();
        
        int selectedRow = kidsTable.getSelectedRow();
        TableModel tm = kidsTable.getModel();
        
        String brand = tm.getValueAt(selectedRow, 0).toString();
        String model = tm.getValueAt(selectedRow, 1).toString();
        String price = tm.getValueAt(selectedRow, 2).toString();
        String stock = tm.getValueAt(selectedRow, 3).toString();
        String feature = tm.getValueAt(selectedRow, 4).toString();
        ImageIcon img = (ImageIcon) tm.getValueAt(selectedRow, 5);
        
        pi.productInfoBrandName.setText(brand);
        pi.productInfoModel.setText(model);
        pi.productInfoPrice.setText(price);
        pi.productInfoStock.setText(stock);
        pi.productInfoFeature.setText(feature);
        pi.productPhoto.setIcon(img);
    }                                      

    private void homeTableMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        int rowIndex = homeTable.getSelectedRow();
        
        if(rowIndex<=2)
            ProductInformation.categoryChooser = "electronics";
        else if(rowIndex>2 && rowIndex<=5)
            ProductInformation.categoryChooser = "mobiles";
        else 
            ProductInformation.categoryChooser = "kids";
        
        pi.setVisible(true);
        pi.pack();
        
        int selectedRow = homeTable.getSelectedRow();
        TableModel tm = homeTable.getModel();
        
        String brand = tm.getValueAt(selectedRow, 0).toString();
        String model = tm.getValueAt(selectedRow, 1).toString();
        String price = tm.getValueAt(selectedRow, 2).toString();
        String stock = tm.getValueAt(selectedRow, 3).toString();
        String feature = tm.getValueAt(selectedRow, 4).toString();
        ImageIcon img = (ImageIcon) tm.getValueAt(selectedRow, 5);
        
        pi.productInfoBrandName.setText(brand);
        pi.productInfoModel.setText(model);
        pi.productInfoPrice.setText(price);
        pi.productInfoStock.setText(stock);
        pi.productInfoFeature.setText(feature);
        pi.productPhoto.setIcon(img);
        
        
        
        
    }                                      

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void searchButtonMousePressed(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
        searchButton.setBackground(new Color(0, 77, 64));
    }                                         

    private void searchButtonMouseReleased(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        searchButton.setBackground(new Color(0, 121, 107));
    }                                          

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        //ProductInformation.categoryChooser = "mobiles";
        Search.electronics=0;
        Search.mobile=0;
        Search.kids=0;
        
        ArrayList<ProductList> list = Search.mobileSearch(searchBar.getText());
        Object rowData[] = new Object[6];
        int i, j, k;
        
        
        if(searchBar.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Search field empty!");
        else if(Search.electronics==0 && Search.mobile==0 && Search.kids==0)
            JOptionPane.showMessageDialog(null, "Sorry! Product does not exist!");
        else{
            cardParentPanel.removeAll();
            cardParentPanel.add(searchPanel);
            cardParentPanel.repaint();
            cardParentPanel.revalidate();
                    
            DefaultTableModel model =  (DefaultTableModel) searchTable.getModel();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            searchTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            searchTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
            searchTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
            searchTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            searchTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );


            model.setRowCount(0);
            for(i=0 ; i<Search.electronics; i++){
                rowData[0] = list.get(i).getBrand();
                rowData[1] = list.get(i).getModel();
                rowData[2] = list.get(i).getPrice();
                rowData[3] = list.get(i).getQty();
                rowData[4] = list.get(i).getDescription();
                String temp = list.get(i).getMimage();
                ImageIcon ii = new ImageIcon(getClass().getResource("/products/electronics/"+temp));
                Image resizedImage = ii.getImage();
                ii = new ImageIcon(resizedImage.getScaledInstance(160, 160, Image.SCALE_SMOOTH));

                rowData[5] = ii;
                model.addRow(rowData);
                searchTable.setRowHeight(150);
                searchTable.getColumnModel().getColumn(5).setPreferredWidth(150);
            }
            for(k=i; k<Search.mobile+Search.electronics; k++){
                rowData[0] = list.get(k).getBrand();
                rowData[1] = list.get(k).getModel();
                rowData[2] = list.get(k).getPrice();
                rowData[3] = list.get(k).getQty();
                rowData[4] = list.get(k).getDescription();
                String temp = list.get(k).getMimage();
                ImageIcon ii = new ImageIcon(getClass().getResource("/products/mobiles/"+temp));
                Image resizedImage = ii.getImage();
                ii = new ImageIcon(resizedImage.getScaledInstance(160, 160, Image.SCALE_SMOOTH));

                rowData[5] = ii;
                model.addRow(rowData);
                searchTable.setRowHeight(150);
                searchTable.getColumnModel().getColumn(5).setPreferredWidth(150);
            }
            System.out.println();
            for(j=k; j<Search.mobile+Search.electronics+Search.kids; j++){
                rowData[0] = list.get(j).getBrand();
                rowData[1] = list.get(j).getModel();
                rowData[2] = list.get(j).getPrice();
                rowData[3] = list.get(j).getQty();
                rowData[4] = list.get(j).getDescription();
                String temp = list.get(j).getMimage();
                ImageIcon ii = new ImageIcon(getClass().getResource("/products/kids/"+temp));
                Image resizedImage = ii.getImage();
                ii = new ImageIcon(resizedImage.getScaledInstance(160, 160, Image.SCALE_SMOOTH));

                rowData[5] = ii;
                model.addRow(rowData);
                searchTable.setRowHeight(150);
                searchTable.getColumnModel().getColumn(5).setPreferredWidth(150);
            }
        }
        
        
    }                                            

    private void searchBarMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        searchBar.setText("");
    }                                      

    private void searchTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        int rowIndex = searchTable.getSelectedRow();
        
        if(Search.electronics!=0 && rowIndex<Search.electronics)
            ProductInformation.categoryChooser = "electronics";
        else if(Search.mobile!=0 && rowIndex>=Search.electronics && rowIndex<Search.electronics+Search.mobile)
            ProductInformation.categoryChooser = "mobiles";
        else 
            ProductInformation.categoryChooser = "kids";
        
        pi.setVisible(true);
        pi.pack();
        
        int selectedRow = searchTable.getSelectedRow();
        TableModel tm = searchTable.getModel();
        
        String brand = tm.getValueAt(selectedRow, 0).toString();
        String model = tm.getValueAt(selectedRow, 1).toString();
        String price = tm.getValueAt(selectedRow, 2).toString();
        String stock = tm.getValueAt(selectedRow, 3).toString();
        String feature = tm.getValueAt(selectedRow, 4).toString();
        ImageIcon img = (ImageIcon) tm.getValueAt(selectedRow, 5);
        
        pi.productInfoBrandName.setText(brand);
        pi.productInfoModel.setText(model);
        pi.productInfoPrice.setText(price);
        pi.productInfoStock.setText(stock);
        pi.productInfoFeature.setText(feature);
        pi.productPhoto.setIcon(img);
        
        
        
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainPage().setVisible(true);
//            }
//        });
        JFrame newMain = new MainPage();
        newMain.setTitle("Black Bengal Shopping");
        newMain.setVisible(true);
        newMain.setResizable(false);
        
        
        
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel BackgroundPanel;
    private javax.swing.JButton LogInButton;
    private javax.swing.JButton LogUpButton;
    private javax.swing.JButton accountButton;
    public static javax.swing.JLabel billLabel;
    private javax.swing.JButton buyButton;
    private javax.swing.JPanel cardParentPanel;
    private javax.swing.JButton cartButton;
    public static javax.swing.JTable cartItemTable;
    private javax.swing.JPanel cartPanel;
    private javax.swing.JButton electronicsButton;
    private javax.swing.JPanel electronicsPanel;
    private javax.swing.JTable electronicsTable;
    private javax.swing.JLabel emptyField;
    private javax.swing.JPanel homePanel;
    private javax.swing.JTable homeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JButton kidsButton;
    private javax.swing.JPanel kidsPanel;
    private javax.swing.JTable kidsTable;
    private javax.swing.JTable mobileTable;
    private javax.swing.JButton mobilesButton;
    private javax.swing.JPanel mobilesPanel;
    private javax.swing.JButton newlyAdded;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTable searchTable;
    private javax.swing.JCheckBox showPassword;
    private javax.swing.JCheckBox showPassword1;
    private javax.swing.JButton signInButton;
    private javax.swing.JPanel signInPanel;
    private javax.swing.JPasswordField signInPasswordField;
    private javax.swing.JTextField signInUsernameField;
    private javax.swing.JButton signUpButton;
    private javax.swing.JTextField signUpCardNumberField;
    private javax.swing.JTextField signUpEmailField;
    private javax.swing.JTextField signUpNameField;
    private javax.swing.JPanel signUpPanel;
    private javax.swing.JPasswordField signUpPasswordField;
    private javax.swing.JTextField signUpUsernameField;
    private javax.swing.JLabel usernameExists;
    private javax.swing.JTextField warningLabel;
    // End of variables declaration                   
}
